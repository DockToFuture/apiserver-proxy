// Code generated by MockGen. DO NOT EDIT.
// Source: netif.go

// Package netif is a generated GoMock package.
package netif

import (
	gomock "github.com/golang/mock/gomock"
	netlink "github.com/vishvananda/netlink"
	reflect "reflect"
)

// MockHandle is a mock of Handle interface
type MockHandle struct {
	ctrl     *gomock.Controller
	recorder *MockHandleMockRecorder
}

// MockHandleMockRecorder is the mock recorder for MockHandle
type MockHandleMockRecorder struct {
	mock *MockHandle
}

// NewMockHandle creates a new mock instance
func NewMockHandle(ctrl *gomock.Controller) *MockHandle {
	mock := &MockHandle{ctrl: ctrl}
	mock.recorder = &MockHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandle) EXPECT() *MockHandleMockRecorder {
	return m.recorder
}

// AddrAdd mocks base method
func (m *MockHandle) AddrAdd(link netlink.Link, addr *netlink.Addr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddrAdd", link, addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddrAdd indicates an expected call of AddrAdd
func (mr *MockHandleMockRecorder) AddrAdd(link, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddrAdd", reflect.TypeOf((*MockHandle)(nil).AddrAdd), link, addr)
}

// AddrDel mocks base method
func (m *MockHandle) AddrDel(link netlink.Link, addr *netlink.Addr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddrDel", link, addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddrDel indicates an expected call of AddrDel
func (mr *MockHandleMockRecorder) AddrDel(link, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddrDel", reflect.TypeOf((*MockHandle)(nil).AddrDel), link, addr)
}

// LinkByName mocks base method
func (m *MockHandle) LinkByName(name string) (netlink.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkByName", name)
	ret0, _ := ret[0].(netlink.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LinkByName indicates an expected call of LinkByName
func (mr *MockHandleMockRecorder) LinkByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkByName", reflect.TypeOf((*MockHandle)(nil).LinkByName), name)
}

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// EnsureIPAddress mocks base method
func (m *MockManager) EnsureIPAddress() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureIPAddress")
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureIPAddress indicates an expected call of EnsureIPAddress
func (mr *MockManagerMockRecorder) EnsureIPAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureIPAddress", reflect.TypeOf((*MockManager)(nil).EnsureIPAddress))
}

// RemoveIPAddress mocks base method
func (m *MockManager) RemoveIPAddress() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveIPAddress")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveIPAddress indicates an expected call of RemoveIPAddress
func (mr *MockManagerMockRecorder) RemoveIPAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveIPAddress", reflect.TypeOf((*MockManager)(nil).RemoveIPAddress))
}
